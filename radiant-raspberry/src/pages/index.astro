---
import Layout from '../layouts/Layout.astro';
import ProjectItem from '../components/ProjectItem.astro';

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<Layout>
	<section class="intro">
		<h1>Murali Varma</h1>
		<h2>Full Stack Developer</h2>
		<p>
			I am a Full Stack Developer living in the Bay Area. I love keeping myself up-to-date with the latest front-end technologies and build backends that scale with it.
		</p>
		<p>
			In fact, when I had first made this website, it was in <a href="https://angularjs.org/">AngularJS</a>. Later I moved to a minimal <a href="https://bulma.io/">Bulma</a> framework. Then it used <a href="https://vuepress.vuejs.org/">VuePress</a> deployed on <a href="https://www.netlify.com/">Netlify</a>. Now it's built with <a href="https://astro.build">Astro</a>.
		</p>
		<div class="cta-buttons">
			<a href="/projects" class="cta-button primary">View My Projects</a>
			<a href="/about" class="cta-button">About Me</a>
		</div>
	</section>

	<section class="projects">
		<h2>TripIt Vue Web app</h2>
		<ProjectItem tags={['VueJS', 'Docker', 'CloudFormation', 'Nginx', 'Auth', 'PHP', 'Jest', 'Cypress']}>
			<div slot="description">
				I am currently leading a dev team in developing TripIt's new Web Application built from the ground up in VueJS. My initial goal was to create a POC that integrates with TripIt's existing infrastructure of AWS ECS containers and CI/CD pipeline. Next, I deep dived into authentication mechanisms and created RFCs for team input. We decided upon industry best practices and chose cookie based mechanism over OAuth2 to reduce attack vectors.
				<br/><br/>
				Some of my responsibilities included doing architectural reviews with the threat modeling team, mentoring junior developers and creating onboarding documents. Before getting into the daily feature work, I also setup a comprehensive serializer/deserializer framework to abstract out our legacy API in order to reduce work when we transition to the new API.
				<br/><br/>
				As we rolled this app out in EU first, I had some significant challenges to overcome before we could launch. In particular, our old web app was only avalable to US, while our mobile app worked in EU and US. A lot of our code was written under the assumption that only mobile would ever work in EU. I needed a way for browser cookies to maintain sessions for EU, which required a good amount of collaboration with other senior engineers.
				<br/><br/>
				Some of the more interesting features that I worked on in this project include COVID Guidance, account email management, localization and inbox synchronization.
			</div>
			<img slot="image" src="/assets/tripit.png" alt="TripIt Vue Web app screenshot" />
		</ProjectItem>

		<h2>Geo Spatial Data Explorer</h2>
		<ProjectItem tags={['VueJS', 'Python', 'Kubernetes', 'MongoDB', 'OpenSource', 'Jest', 'Tox']}>
			<div slot="description">
				This product startup aimed to present complex geospatial data in easy-to-understand formats of Tables and Maps. I worked as Full Stack Engineer, all the way from the UI in VueJS to the deployment in Kubernetes including the backend in Flask/Python and managing user data in MongoDB. 
				<br/><br/>
				I took ownership of the data table component and made a completely in-house open sourced VueJS table component that uses the power of scoped slots. Some of its features are sticky columns, grouped headers and unopinionated styling that allow end-users to customize the look and feel while not sacrificing functionality.
				<br/><br/>
				I also handled the Python mini-server code, which would interact with a much larger data API using Keycloak as its authentication mechanism. Consequently, I worked on all the token exchange mechanisms between various clients, Keycloak JavaScript library integration and Keycloak login page theming (using kubernetes init containers managed via Helm and Apache Freemarker).
			</div>
			<img slot="image" src="/assets/atlas.jpg" alt="Geo Spatial Data Explorer screenshot" />
		</ProjectItem>

		<!-- More projects would be added here -->
	</section>
</Layout>

<style>
	.intro {
		max-width: 800px;
		margin: 4rem auto;
		text-align: center;
	}
	
	h1 {
		font-size: 3rem;
		margin-bottom: 0.5rem;
		color: var(--text-color);
	}
	
	h2 {
		font-size: 1.5rem;
		font-weight: 400;
		margin-bottom: 2rem;
		color: #666;
	}
	
	p {
		line-height: 1.6;
		margin-bottom: 1.5rem;
		font-size: 1.1rem;
	}

	.cta-buttons {
		display: flex;
		justify-content: center;
		gap: 1rem;
		margin-top: 2.5rem;
	}

	.cta-button {
		display: inline-block;
		padding: 0.75rem 1.5rem;
		border-radius: 4px;
		font-weight: 500;
		transition: all 0.2s ease;
		text-decoration: none;
	}

	.cta-button.primary {
		background-color: var(--primary-color);
		color: white;
	}

	.cta-button.primary:hover {
		background-color: #3b87d0;
		text-decoration: none;
	}

	.cta-button:not(.primary) {
		border: 1px solid var(--border-color);
		color: var(--text-color);
	}

	.cta-button:not(.primary):hover {
		background-color: #f5f5f5;
		text-decoration: none;
	}

	@media (max-width: 768px) {
		.intro {
			margin: 2rem auto;
			padding: 0 1rem;
		}

		h1 {
			font-size: 2.5rem;
		}

		h2 {
			font-size: 1.2rem;
		}

		.cta-buttons {
			flex-direction: column;
			align-items: center;
		}

		.cta-button {
			width: 100%;
			text-align: center;
		}
	}
</style>
