---
// DarkModeSwitch.astro
---

<div class="theme-switch-wrapper">
  <div class="theme-switch">
    <button class="theme-button light-button" data-theme="light" title="Light mode">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
      </svg>
    </button>
    <button class="theme-button dark-button" data-theme="dark" title="Dark mode">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
      </svg>
    </button>
    <button class="theme-button system-button" data-theme="system" title="System preference">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
        <line x1="8" y1="21" x2="16" y2="21"></line>
        <line x1="12" y1="17" x2="12" y2="21"></line>
      </svg>
    </button>
  </div>
</div>

<script>
  // Define theme types
  type ThemeOption = 'light' | 'dark' | 'system';
  
  // Function to set the theme and update the UI
  function setTheme(theme: ThemeOption) {
    // Save to localStorage
    localStorage.setItem('theme', theme);
    
    // Update active buttons
    updateActiveButton(theme);
    
    // Apply the theme
    applyTheme(theme);
  }
  
  // Function to apply theme
  function applyTheme(theme: ThemeOption) {
    const isDark = 
      theme === 'dark' || 
      (theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);
    
    if (isDark) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }
  
  // Update which button is active
  function updateActiveButton(theme: ThemeOption) {
    const buttons = document.querySelectorAll('.theme-button');
    buttons.forEach(button => {
      button.classList.remove('active');
      if (button.getAttribute('data-theme') === theme) {
        button.classList.add('active');
      }
    });
  }
  
  // Setup on page load
  document.addEventListener('DOMContentLoaded', () => {
    // Get saved theme or default to system
    const savedTheme = localStorage.getItem('theme') as ThemeOption || 'system';
    
    // Initialize button state
    updateActiveButton(savedTheme);
    
    // Apply the theme
    applyTheme(savedTheme);
    
    // Add event listeners to buttons
    const buttons = document.querySelectorAll('.theme-button');
    buttons.forEach(button => {
      button.addEventListener('click', () => {
        const theme = button.getAttribute('data-theme') as ThemeOption;
        setTheme(theme);
      });
    });
    
    // Listen for system changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      if (savedTheme === 'system') {
        applyTheme('system');
      }
    });
  });
</script>

<style>
  .theme-switch-wrapper {
    display: inline-flex;
    align-items: center;
    margin-left: 1rem;
  }
  
  .theme-switch {
    display: flex;
    align-items: center;
    background-color: var(--background-alt);
    border-radius: 24px;
    padding: 3px;
    border: 1px solid var(--border-color);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
  }
  
  .theme-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    border-radius: 50%;
    border: none;
    background: transparent;
    color: var(--text-light);
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    padding: 0;
  }
  
  .theme-button svg {
    width: 16px;
    height: 16px;
  }
  
  .theme-button:hover {
    color: var(--text-color);
    background-color: rgba(0, 0, 0, 0.05);
  }
  
  .theme-button.active {
    color: var(--primary-color);
    background-color: var(--background-color);
    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
    transform: scale(1.05);
  }
  
  /* Dark mode specific styles */
  html.dark .theme-switch {
    background-color: var(--background-alt);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }
  
  html.dark .theme-button:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  html.dark .theme-button.active {
    background-color: var(--dark-bg);
    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);
  }
  
  @media (max-width: 768px) {
    .theme-switch-wrapper {
      margin-left: 0;
      margin-top: 0.5rem;
    }
  }
</style> 